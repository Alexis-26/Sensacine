import pandas as pd
from sqlalchemy.sql import text
from decimal import Decimal, InvalidOperation

"""Se va a hacer funciones para insertar datos en mysql desde los datos extraidos"""
def sp_insert_peliculas(db, df):

    for index, row in df.iterrows():
        nombre = row['pelicula']
        if db.connection:
            try:
                with db.connection.begin() as transaction:
                    # Llama al procedimiento almacenado para insertar la película
                    db.connection.execute(text("CALL sp_insert_pelicula(:nombre)"), {"nombre": nombre.strip()})
            except SQLAlchemyError as e:
                print(e)
    print("termino la insercion en peliculas")

def sp_insert_director(db, df):

    for index, row in df.iterrows():
        nombre = row['director']
        if db.connection:
            try:
                with db.connection.begin() as transaction:
                    # Llama al procedimiento almacenado para insertar el director
                    db.connection.execute(text("CALL sp_insert_director(:nombre)"), {"nombre": nombre.strip()})
            except SQLAlchemyError as e:
                print(e)
    print("termino la insercion en director")

def sp_insert_estreno(db, df):

    for index, row in df.iterrows():
        nombre = row['tipo_estreno']
        if db.connection:
            try:
                with db.connection.begin() as transaction:
                    # Llama al procedimiento almacenado para insertar el estreno
                    db.connection.execute(text("CALL sp_insert_estreno(:nombre)"), {"nombre": nombre.strip()})
            except SQLAlchemyError as e:
                print(e)
    print("termino la insercion en estreno")

def sp_insert_genero(db, df):
    for index, row in df.iterrows():
        nombre = row['genero']
        if db.connection:
            try:
                with db.connection.begin() as transaction:
                    # Llama al procedimiento almacenado para insertar el genero
                    db.connection.execute(text("CALL sp_insert_genero(:nombre)"), {"nombre": nombre.strip()})
            except SQLAlchemyError as e:
                print(e)
    print("termino la insercion en genero")

def sp_insert_idioma(db, df):
    for index, row in df.iterrows():
        nombre = row['idioma']
        if db.connection:
            try:
                with db.connection.begin() as transaction:
                    # Llama al procedimiento almacenado para insertar la idioma
                    db.connection.execute(text("CALL sp_insert_idioma(:nombre)"), {"nombre": nombre.strip()})
            except SQLAlchemyError as e:
                print(e)
    print("termino la insercion en idioma")

def sp_insert_puntaje(db, df):
    # Seleccionar solo las columnas que queremos
    df = df[['id_pelicula', 'calf_medios', 'calf_usuarios', 'calf_sensacine']]
    # Eliminar filas duplicadas basadas en la columna 'id_pelicula'
    df_sin_duplicados = df.drop_duplicates(subset=['id_pelicula'])
    for index, row in df_sin_duplicados.iterrows():
        medios = row['calf_medios']
        usuarios = row['calf_usuarios']
        sensacine = row['calf_sensacine']
        id_pelicula = row['id_pelicula']

        if db.connection:
            try:
                with db.connection.begin() as transaction:
                    # Llama al procedimiento almacenado para insertar el puntaje
                    db.connection.execute(
                        text("CALL sp_insert_puntaje(:medios, :usuarios, :sensacine, :id_pelicula)"),
                        {
                            "medios": medios,
                            "usuarios": usuarios,
                            "sensacine": sensacine,
                            "id_pelicula": id_pelicula
                        }
                    )
            except SQLAlchemyError as e:
                print(f"Error al insertar puntaje para id_pelicula={id_pelicula}: {e}")
    print("termino la insercion en puntaje")

def sp_insert_especificaciones_tecnicas(db, df):
    for index, row in df.iterrows():
        nacionalidad = row['nacionalidad']
        distribuidora = row['distribuidora']
        presupuestos = row['presupuesto']
        año_produccion = row['fecha_produccion']
        id_pelicula = row['id_pelicula']

        if db.connection:
                try:
                    with db.connection.begin() as transaction:
                        # Llama al procedimiento almacenado para insertar las especificaciones técnicas
                        db.connection.execute(
                            text("CALL sp_insert_especificaciones_tecnicas(:nacionalidad, :distribuidora, :presupuestos, :año_produccion, :id_pelicula)"),
                            {
                                "nacionalidad": nacionalidad,
                                "distribuidora": distribuidora,
                                "presupuestos": presupuestos,
                                "año_produccion": año_produccion,
                                "id_pelicula": id_pelicula
                            }
                        )
                except SQLAlchemyError as e:
                    print(e)
    print("termino la insercion en especificaciones tecnicas")

def sp_insert_director_pelicula(db,df):
    try:
        for index, row in df.iterrows():
            nombre_director = row['director']
            id_pelicula = row['id_pelicula']

            if db.connection:
                with db.connection.begin() as transaction:
                    # Llama al procedimiento almacenado para insertar la relación director_pelicula
                    db.connection.execute(
                        text("CALL sp_insert_director_pelicula(:nombre_director, :id_pelicula)"),
                        {
                            "nombre_director": nombre_director,
                            "id_pelicula": id_pelicula
                        }
                    )
        print("termino la insercion en director pelicula")
    except SQLAlchemyError as e:
        print(e)

def sp_insert_genero_pelicula(db, df):
    try:
        for index, row in df.iterrows():
            id_genero = row['genero']
            id_pelicula = row['id_pelicula']

            if db.connection:
                with db.connection.begin() as transaction:
                    # Llama al procedimiento almacenado para insertar la relación genero_pelicula
                    db.connection.execute(
                        text("CALL sp_insert_genero_pelicula(:id_genero, :id_pelicula)"),
                        {
                            "id_genero": id_genero,
                            "id_pelicula": id_pelicula
                        }
                    )
        print("termino la insercion en  pelicula")
    except SQLAlchemyError as e:
        print(e)

def sp_insert_idioma_pelicula(db, df):
    try:
        for index, row in df.iterrows():
            idioma = row['idioma']
            id_pelicula = row['id_pelicula']

            if db.connection:
                with db.connection.begin() as transaction:
                    # Llama al procedimiento almacenado para insertar la relación genero_pelicula
                    db.connection.execute(
                        text("CALL sp_insert_idioma_pelicula(:idioma, :id_pelicula)"),
                        {
                            "idioma": idioma,
                            "id_pelicula": id_pelicula
                        }
                    )
        print("termino la insercion en idioma pelicula")
    except SQLAlchemyError as e:
        print(e)


def sp_insert_detalle_pelicula(db, df):
    # Eliminar duplicados de la columna 'id_pelicula'
    df_sin_duplicados = df.drop_duplicates(subset=['id_pelicula'])

    for index, row in df_sin_duplicados.iterrows():
        fecha_insertar = row['fecha_estreno']
        duracion_insertar = row['duracion']
        id_pelicula_insertar = row['id_pelicula']
        id_estreno_insertar = row['id_pelicula']
        id_director_insertar = row['id_pelicula']
        id_genero_insertar = row['id_pelicula']
        id_idioma_insertar = row['id_pelicula']

        if db.connection:
            try:
                with db.connection.begin() as transaction:
                    # Llama al procedimiento almacenado para insertar el detalle de la película
                    db.connection.execute(
                        text(
                            "CALL sp_insert_detalle_pelicula(:fecha, :duracion, :id_pelicula, :id_estreno, :id_director, :id_genero, :id_idioma)"),
                        {
                            "fecha": fecha_insertar,
                            "duracion": duracion_insertar,
                            "id_pelicula": id_pelicula_insertar,
                            "id_estreno": id_estreno_insertar,
                            "id_director": id_director_insertar,
                            "id_genero": id_genero_insertar,
                            "id_idioma": id_idioma_insertar
                        }
                    )
            except SQLAlchemyError as e:
                print(e)
    print("termino la insercion en director pelicula")